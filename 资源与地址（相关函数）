资源->文件->内存映像->线性地址
进程使用资源->进程访问地址

由os规定，ELF格式为每个地址提供了一个虚拟地址空间即为进程提供了一个独立且自主的运行资源环境。

进程间通信
彼此相互独立->不能直接通信
方法：1、通过os内核转发
2、共享内存
3、共享文件（速度慢）

文件（是访问系统资源的方法    可以实现通信）

操作文件的方案：
1、基于

int fprintf (FILE* stream, const char*format, [argument])
参数：

stream-- 这是指向 FILE 对象的指针，该 FILE 对象标识了输出数据流。
format-- 这是 C 字符串，包含了要被写入到流 stream 中的文本。它可以包含嵌入的 format 标签，format 标签可被随后的附加参数中指定的值替换，并按需求进行格式化。
format 标签属性是%[flags][width][.precision][length]specifier
[argument]：附加的参数列表 
其中，Linux的输出数据流stream提供了5种标准的流：

stdin        标准输入 
stdout      标准输出 
stderr       标准错误
stdprn      标准打印机
stdaux      标准串行设备


open中O_RDONLY，O_WRONLY，O__RDWR的含义：
O_RDONLY : read only 只读

O_WRONLY : write only 只写
O_RDWR : read write 可读可写
O_TRUNC : 若文件存在则长度被截为0(属性不变)

(1)size_t fread ( void * ptr, size_t size, size_t count, FILE * stream );

　　　　　其中，ptr：指向保存结果的指针；size：每个数据类型的大小；count：数据的个数；stream：文件指针

　　　　　函数返回读取数据的个数。

(2)size_t fwrite ( const void * ptr, size_t size, size_t count, FILE * stream );

　　　　   其中，ptr：指向保存数据的指针；size：每个数据类型的大小；count：数据的个数；stream：文件指针

　　　　　函数返回写入数据的个数。
